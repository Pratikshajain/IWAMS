# -*- coding: utf-8 -*-
"""
/***************************************************************************
 IWAMSDialog
                                 A QGIS plugin
 This plugin help in planning watershed managment projects
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2019-09-04
        git sha              : $Format:%H$
        copyright            : (C) 2019 by IIT Bombay
        email                : pratiksha1jain@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import sys 
import subprocess
# sys.path.append ('C:\Program Files (x86)\QGIS 3.2\apps\qgis\python')

from qgis.PyQt import uic 
from qgis.PyQt import QtWidgets


from PyQt5.QtWidgets import QFileDialog



# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'Hydrological_dialog_base.ui'))


class Simple_Run:            

    def Simple_Run(self,Simulation_Year,dem_file,slop_file,flow_direction_file,flow_accumulation_file,land_use_file,soil_texture_file,rainfall_data_file,boundry_file,paremeter_file,output_folder):

        print("In Simple Run ............................")
        cwd = os.path.dirname(__file__)

        print(cwd)
        
        # exec(open(r"/home/viral/.local/share/QGIS/QGIS3/profiles/default/python/plugins/iwams/Hydrological_Analysis/Simple_Run.py").read())
        os.system("python3 "+ cwd +"/Hydrological_Analysis/Simple_Run.py "+ str(Simulation_Year) +" "+ str(dem_file) +" "+ str(slop_file) +" "+ str(flow_direction_file) +" "+ str(flow_accumulation_file) +" "+ str(land_use_file) +" "+ str(soil_texture_file) +" "+ str(rainfall_data_file) +" "+ str(boundry_file) +" "+ str(paremeter_file) +" "+ str(output_folder))
        #exec("C:\\Users\\Pratiksha\\AppData\\Roaming\\QGIS\\QGIS3\\profiles\\default\\python\\plugins\\iwams\\Hydrological_Analysis\\Simple_Run.py")

class Sensitivity_Run:

    def Sensitivity_Run(self,Simulation_Year,dem_file,slop_file,flow_direction_file,flow_accumulation_file,land_use_file,soil_texture_file,rainfall_data_file,boundry_file,paremeter_file,output_folder,cb_arr):

        print("In Sensitivity_Run .......................")
        cwd = os.path.dirname(__file__)
        print(cwd)
        
        # exec(open(r"/home/viral/.local/share/QGIS/QGIS3/profiles/default/python/plugins/iwams/Hydrological_Analysis/Simple_Run.py").read())
        os.system("python3 "+cwd+"/Hydrological_Analysis/Sensitivity.py " + str(Simulation_Year) +" "+ str(dem_file) +" "+ str(slop_file) +" "+ str(flow_direction_file) +" "+ str(flow_accumulation_file) +" "+ str(land_use_file) +" "+ str(soil_texture_file) +" "+ str(rainfall_data_file) +" "+ str(boundry_file) +" "+ str(paremeter_file) +" "+ str(output_folder) +" "+ str(cb_arr))
        
class Calibration_Run:

    def Calibration_Run(self,Start_Year,End_Year,dem_file,slop_file,flow_direction_file,flow_accumulation_file,soil_texture_file,land_use_folder,rain_fall_data_file_cal,boundry_file,paremeter_file,calibration_range_file,observed_file,output_folder,cb_arr):

        print("In Calibration_Run .......................")
        cwd = os.path.dirname(__file__)
        print(cwd)

        os.system("python3 "+cwd+"/Hydrological_Analysis/Callibration.py " + str(Start_Year) +" "+ str(End_Year) +" "+ str(dem_file) +" "+ str(slop_file) +" "+ str(flow_direction_file) +" "+ str(flow_accumulation_file) +" "+ str(soil_texture_file) +" "+ str(land_use_folder) +" "+ str(rain_fall_data_file_cal) +" "+ str(boundry_file) +" "+ str(paremeter_file) +" "+ str(calibration_range_file) +" "+ str(observed_file) +" "+ str(output_folder)+" "+str(cb_arr))
    
class Validation_Run:
    def Validation_Run(self,Start_Year,End_Year,dem_file,slop_file,flow_direction_file,flow_accumulation_file,soil_texture_file,land_use_folder,rain_fall_data_file_cal,boundry_file,paremeter_file,observed_file,calibrated_file,output_folder):
        
        print("In Validation Run ........................")
        cwd = os.path.dirname(__file__)
        print(cwd)

        os.system("python3 "+cwd+"/Hydrological_Analysis/Vallidation.py " + str(Start_Year) +" "+ str(End_Year) +" "+ str(dem_file) +" "+ str(slop_file) +" "+ str(flow_direction_file) +" "+ str(flow_accumulation_file) +" "+ str(soil_texture_file) +" "+ str(land_use_folder) +" "+ str(rain_fall_data_file_cal) +" "+ str(boundry_file) +" "+ str(paremeter_file) +" "+str(calibrated_file)+" " +str(observed_file) +" "+ str(output_folder))

class HydrologicalDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""


        super(HydrologicalDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        self.dem_file = None
        self.slop_file = None
        self.flow_direction_file = None
        self.flow_accumulation_file = None
        self.land_use_file = None
        self.soil_texture_file = None
        self.rainfall_data_file = None
        self.boundry_file = None
        self.paremeter_file = None
        self.output_folder = None
        self.land_use_folder = None
        self.rain_fall_data_file_cal = None
        self.calibration_range_file = None
        self.observed_file = None
        self.calibrated_file = None

        #simple run 
        self.PB_SR_1.clicked.connect(self.dem)
        self.PB_SR_2.clicked.connect(self.slop)
        self.PB_SR_3.clicked.connect(self.flow_direction)
        self.PB_SR_4.clicked.connect(self.flow_accumulation)
        self.PB_SR_5.clicked.connect(self.land_use)
        self.PB_SR_6.clicked.connect(self.soil_texture)
        self.PB_SR_7.clicked.connect(self.rainfall_data)
        self.PB_SR_8.clicked.connect(self.boundry)
        self.PB_SR_9.clicked.connect(self.paremeter_file_call)
        self.PB_SR_10.clicked.connect(self.output_folder_call)

        #sensitivity
        self.PB_SA_1.clicked.connect(self.dem)
        self.PB_SA_2.clicked.connect(self.slop)
        self.PB_SA_3.clicked.connect(self.flow_direction)
        self.PB_SA_4.clicked.connect(self.flow_accumulation)
        self.PB_SA_5.clicked.connect(self.land_use)
        self.PB_SA_6.clicked.connect(self.soil_texture)
        self.PB_SA_7.clicked.connect(self.rainfall_data)
        self.PB_SA_8.clicked.connect(self.boundry)
        self.PB_SA_9.clicked.connect(self.paremeter_file_call)
        self.PB_SA_10.clicked.connect(self.output_folder_call)

        #calibration
        self.PB_CA_1.clicked.connect(self.dem)
        self.PB_CA_2.clicked.connect(self.slop)
        self.PB_CA_3.clicked.connect(self.flow_direction)
        self.PB_CA_4.clicked.connect(self.flow_accumulation)
        self.PB_CA_5.clicked.connect(self.soil_texture)
        self.PB_CA_6.clicked.connect(self.land_use_folder_call)
        self.PB_CA_7.clicked.connect(self.rain_fall_data_cal_call)
        self.PB_CA_8.clicked.connect(self.boundry)
        self.PB_CA_9.clicked.connect(self.paremeter_file_call)
        self.PB_CA_10.clicked.connect(self.calibration_range)
        self.PB_CA_11.clicked.connect(self.observed)
        self.PB_CA_12.clicked.connect(self.output_folder_call)

        #validation
        self.PB_VA_1.clicked.connect(self.dem)
        self.PB_VA_2.clicked.connect(self.slop)
        self.PB_VA_3.clicked.connect(self.flow_direction)
        self.PB_VA_4.clicked.connect(self.flow_accumulation)
        self.PB_VA_5.clicked.connect(self.soil_texture)
        self.PB_VA_6.clicked.connect(self.land_use_folder_call)
        self.PB_VA_7.clicked.connect(self.rain_fall_data_cal_call)
        self.PB_VA_8.clicked.connect(self.boundry)
        self.PB_VA_9.clicked.connect(self.paremeter_file_call)
        self.PB_VA_10.clicked.connect(self.observed)
        self.PB_VA_11.clicked.connect(self.calibrated)
        self.PB_VA_12.clicked.connect(self.output_folder_call)

#        self.PB_Output_SR_A.clicked.connect(self.Output_SR_A)
        self.PB_SR_MR.clicked.connect(self.SR_fn)
        self.PB_SA_MR.clicked.connect(self.Sensitivity_fn)
        self.MR_CA.clicked.connect(self.Calibration_fn)
        self.Cal_MR_A_3.clicked.connect(self.Val_fn)
        
# Modified MMF Annual (_A)  

    def Simulation_year_SR(self):
        return self.LE_SR_0.text()

    def Simulation_year_SA(self):
        return self.LE_SA_0.text()

    def dem(self):
        self.dem_file,_filter = QFileDialog.getOpenFileName()
        self.LE_SR_1.setText(self.dem_file)
        self.LE_SA_1.setText(self.dem_file)
        self.LE_CA_1.setText(self.dem_file)
        self.LE_VA_1.setText(self.dem_file)

    def slop(self):
        self.slop_file,_filter = QFileDialog.getOpenFileName()
        self.LE_SR_2.setText(self.slop_file)
        self.LE_SA_2.setText(self.slop_file)
        self.LE_CA_2.setText(self.slop_file)
        self.LE_VA_2.setText(self.slop_file)

    def flow_direction(self):
        self.flow_direction_file,_filter = QFileDialog.getOpenFileName()
        self.LE_SR_3.setText(self.flow_direction_file)
        self.LE_SA_3.setText(self.flow_direction_file)
        self.LE_CA_3.setText(self.flow_direction_file)
        self.LE_VA_3.setText(self.flow_direction_file)

    def flow_accumulation(self):
        self.flow_accumulation_file,_filter = QFileDialog.getOpenFileName()
        self.LE_SR_4.setText(self.flow_accumulation_file)
        self.LE_SA_4.setText(self.flow_accumulation_file)
        self.LE_CA_4.setText(self.flow_accumulation_file)
        self.LE_VA_4.setText(self.flow_accumulation_file)

    def land_use(self):
        self.land_use_file,_filter = QFileDialog.getOpenFileName()
        self.LE_SR_5.setText(self.land_use_file)
        self.LE_SA_5.setText(self.land_use_file)
        

    def land_use_folder_call(self):
        self.land_use_folder = QFileDialog.getExistingDirectory()
        self.LE_CA_6.setText(self.land_use_folder)
        self.LE_VA_6.setText(self.land_use_folder)


    def rain_fall_data_cal_call(self):
        self.rain_fall_data_file_cal,_filter = QFileDialog.getOpenFileName()
        self.LE_CA_7.setText(self.rain_fall_data_file_cal)
        self.LE_VA_7.setText(self.rain_fall_data_file_cal)

    def soil_texture(self):
        self.soil_texture_file,_filter = QFileDialog.getOpenFileName()
        self.LE_SR_6.setText(self.soil_texture_file)
        self.LE_SA_6.setText(self.soil_texture_file)
        self.LE_CA_5.setText(self.soil_texture_file)
        self.LE_VA_5.setText(self.soil_texture_file)

    def rainfall_data(self):
        self.rainfall_data_file,_filter = QFileDialog.getOpenFileName()
        self.LE_SR_7.setText(self.rainfall_data_file)
        self.LE_SA_7.setText(self.rainfall_data_file)
        

    def boundry(self):
        self.boundry_file,_filter = QFileDialog.getOpenFileName()
        self.LE_SR_8.setText(self.boundry_file)
        self.LE_SA_8.setText(self.boundry_file)
        self.LE_CA_8.setText(self.boundry_file)
        self.LE_VA_8.setText(self.boundry_file)

    def paremeter_file_call(self):
        self.paremeter_file,_filter = QFileDialog.getOpenFileName()
        self.LE_SR_9.setText(self.paremeter_file)
        self.LE_SA_9.setText(self.paremeter_file)
        self.LE_CA_9.setText(self.paremeter_file)
        self.LE_VA_9.setText(self.paremeter_file)

    def output_folder_call(self):
        self.output_folder = QFileDialog.getExistingDirectory()
        self.LE_SR_10.setText(self.output_folder)
        self.LE_SA_10.setText(self.output_folder)
        self.LE_CA_12.setText(self.output_folder)
        self.LE_VA_12.setText(self.output_folder)

    def calibration_range(self):
        self.calibration_range_file,_filter = QFileDialog.getOpenFileName()
        self.LE_CA_10.setText(self.calibration_range_file)

    def observed(self):
        self.observed_file,_filter = QFileDialog.getOpenFileName()
        self.LE_CA_11.setText(self.observed_file)
        self.LE_VA_10.setText(self.observed_file)

    def calibrated(self):
        self.calibrated_file,_filter = QFileDialog.getOpenFileName()
        self.LE_VA_11.setText(self.calibrated_file)


    def SR_fn(self, parent=None):

        Simulation_Year = self.Simulation_year_SR()
        dem_file = self.dem_file
        slop_file = self.slop_file
        flow_direction_file = self.flow_direction_file
        flow_accumulation_file = self.flow_accumulation_file 
        land_use_file = self.land_use_file 
        soil_texture_file = self.soil_texture_file 
        rainfall_data_file = self.rainfall_data_file 
        boundry_file = self.boundry_file 
        paremeter_file = self.paremeter_file 
        output_folder = self.output_folder 
        
        self.ero=Simple_Run()
        self.ero.Simple_Run(Simulation_Year,dem_file,slop_file,flow_direction_file,flow_accumulation_file,land_use_file,soil_texture_file,rainfall_data_file,boundry_file,paremeter_file,output_folder) 

    def Sensitivity_fn(self,parent=None):

        Simulation_Year = self.Simulation_year_SA()
        dem_file = self.dem_file
        slop_file = self.slop_file
        flow_direction_file = self.flow_direction_file
        flow_accumulation_file = self.flow_accumulation_file 
        land_use_file = self.land_use_file 
        soil_texture_file = self.soil_texture_file 
        rainfall_data_file = self.rainfall_data_file 
        boundry_file = self.boundry_file 
        paremeter_file = self.paremeter_file 
        output_folder = self.output_folder 
        cb_arr = ""
        if(self.RB_SA_MS.isChecked()):
            cb_arr+='MS,'
        if(self.RB_SA_BD.isChecked()):
            cb_arr+='BD,'
        if(self.RB_SA_LP.isChecked()):
            cb_arr+='LP,'
        if(self.RB_SA_EHD.isChecked()):
            cb_arr+='EHD,'
        if(self.RB_SA_PI.isChecked()):
            cb_arr+='PI,'
        if(self.RB_SA_ETO.isChecked()):
            cb_arr+='ETO,'
        if(self.RB_SA_NV.isChecked()):
            cb_arr+='NV,'
        if(self.RB_SA_D.isChecked()):
            cb_arr+='D,'
        if(self.RB_SA_VSc.isChecked()):
            cb_arr+='VSc,'
        if(self.RB_SA_GC.isChecked()):
            cb_arr+='GC,'
        if(self.RB_SA_PH.isChecked()):
            cb_arr+='PH,'
        if(self.RB_SA_CC.isChecked()):
            cb_arr+='CC,'
        if(self.RB_SA_Kc.isChecked()):
            cb_arr+='Kc,'
        if(self.RB_SA_VSs.isChecked()):
            cb_arr+='VSs,'
        if(self.RB_SA_Kz.isChecked()):
            cb_arr+='Kz,'
        if(self.RB_SA_VSz.isChecked()):
            cb_arr+='VSz,'
        if(self.RB_SA_all.isChecked()):
            cb_arr+='all,'
        if(self.RB_SA_Ks.isChecked()):
            cb_arr+='Ks,'
        if(self.RB_SA_DRc.isChecked()):
            cb_arr+='DRc,'
        if(self.RB_SA_DRz.isChecked()):
            cb_arr+='DRz,'
        if(self.RB_SA_DRs.isChecked()):
            cb_arr+='DRs,'

        self.ero=Sensitivity_Run()
        self.ero.Sensitivity_Run(Simulation_Year,dem_file,slop_file,flow_direction_file,flow_accumulation_file,land_use_file,soil_texture_file,rainfall_data_file,boundry_file,paremeter_file,output_folder,cb_arr) 

    def Calibration_fn(self,parent=None):

        Start_Year = self.LE_CA_SY.text()
        End_Year = self.LE_CA_EY.text()
        dem_file = self.dem_file
        slop_file = self.slop_file
        flow_direction_file = self.flow_direction_file
        flow_accumulation_file = self.flow_accumulation_file
        soil_texture_file = self.soil_texture_file
        land_use_folder = self.land_use_folder
        rain_fall_data_file_cal = self.rain_fall_data_file_cal
        boundry_file = self.boundry_file
        paremeter_file = self.paremeter_file
        calibration_range_file = self.calibration_range_file
        observed_file = self.observed_file
        output_folder = self.output_folder

        cb_arr = ""
        if(self.RB_CA_MS.isChecked()):
            cb_arr+='MS,'
        if(self.RB_CA_BD.isChecked()):
            cb_arr+='BD,'
        if(self.RB_CA_LP.isChecked()):
            cb_arr+='LP,'
        if(self.RB_CA_EHD_2.isChecked()):
            cb_arr+='EHD,'
        if(self.RB_CA_PI_2.isChecked()):
            cb_arr+='PI,'
        if(self.RB_CA_ETO.isChecked()):
            cb_arr+='ETO,'
        if(self.RB_CA_NV_2.isChecked()):
            cb_arr+='NV,'
        if(self.RB_CA_D.isChecked()):
            cb_arr+='D,'
        if(self.RB_CA_VSc.isChecked()):
            cb_arr+='VSc,'
        if(self.RB_CA_GC_2.isChecked()):
            cb_arr+='GC,'
        if(self.RB_CA_PH_2.isChecked()):
            cb_arr+='PH,'
        if(self.RB_CA_CC.isChecked()):
            cb_arr+='CC,'
        if(self.RB_CA_KSc.isChecked()):
            cb_arr+='Kc,'
        if(self.RB_CA_VSs.isChecked()):
            cb_arr+='VSs,'
        if(self.RB_CA_KSz.isChecked()):
            cb_arr+='Kz,'
        if(self.RB_CA_VSz.isChecked()):
            cb_arr+='VSz,'
        if(self.RB_CA_all.isChecked()):
            cb_arr+='all,'
        if(self.RB_CA_KSs.isChecked()):
            cb_arr+='Ks,'
        if(self.RB_CA_DRc.isChecked()):
            cb_arr+='DRc,'
        if(self.RB_CA_DRz.isChecked()):
            cb_arr+='DRz,'
        if(self.RB_CA_DRs.isChecked()):
            cb_arr+='DRs,'


        print(cb_arr)
        
        self.ero=Calibration_Run()
        self.ero.Calibration_Run(Start_Year,End_Year,dem_file,slop_file,flow_direction_file,flow_accumulation_file,soil_texture_file,land_use_folder,rain_fall_data_file_cal,boundry_file,paremeter_file,calibration_range_file,observed_file,output_folder,cb_arr)



    def Val_fn(self,parent=None):

        Start_Year = self.LE_VA_SY.text()
        End_Year = self.LE_VA_EY.text()
        dem_file = self.dem_file
        slop_file = self.slop_file
        flow_direction_file = self.flow_direction_file
        flow_accumulation_file = self.flow_accumulation_file
        soil_texture_file = self.soil_texture_file
        land_use_folder = self.land_use_folder
        rain_fall_data_file_cal = self.rain_fall_data_file_cal
        boundry_file = self.boundry_file
        paremeter_file = self.paremeter_file
        calibrated_file = self.calibrated_file
        observed_file = self.observed_file
        output_folder = self.output_folder

        self.ero = Validation_Run()
        self.ero.Validation_Run(Start_Year,End_Year,dem_file,slop_file,flow_direction_file,flow_accumulation_file,soil_texture_file,land_use_folder,rain_fall_data_file_cal,boundry_file,paremeter_file,observed_file,calibrated_file,output_folder)




